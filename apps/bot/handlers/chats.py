from aiogram import Router, types, filters, F, Bot
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from google.api_core import exceptions

from django.core.files import File
from django.conf import settings

from apps.bot.services import (
    get_telegram_user,
    create_history,
    clear_history,
    genai_client,
    genai_chat_generation,
)
from apps.bot.utils import safe_send_markdown, safe_send_plain
from core.settings import GEMINI_API_KEY
import asyncio
import os
from io import BytesIO


router = Router()

class ChatStates(StatesGroup):
    waiting_for_ai = State()


@router.message(ChatStates.waiting_for_ai)
async def reject_while_processing(message: types.Message, state: FSMContext):
    msg = await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –±–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...")
    await state.update_data(wait_msg_id=msg.message_id)


@router.message(F.text)
async def handle_text(message: types.Message, state: FSMContext):
    await state.set_state(ChatStates.waiting_for_ai)

    system_message = await message.answer("üîÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    user_message = message.text
    user_id = message.from_user.id

    try:
        telegram_user = await get_telegram_user(user_id=user_id)
        # History by user
        await create_history(
            telegram_user=telegram_user,
            role="user",
            message_type="text",
            content=user_message
        )
        api_key = telegram_user.access_token or GEMINI_API_KEY

        if not api_key:
            await message.answer(
                "üîë –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω API –∫–ª—é—á –¥–ª—è Google AI.\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_access_key —á—Ç–æ–±—ã –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å."
            )
            return
        
        client = await genai_client(api_key=api_key) # User api key or system api key

        response_ai = await genai_chat_generation(
            client=client, 
            user_id=user_id, 
            message=user_message
        )
        response_ai_to_text = response_ai.text

        if hasattr(response_ai, '__await__'):
            response_ai_to_text = await response_ai_to_text

        # History by model
        await create_history(
            telegram_user=telegram_user,
            role="model",
            message_type="text",
            content=response_ai_to_text
        )
        await system_message.delete()

        data = await state.get_data()

        if "wait_msg_id" in data:
            try:
                await message.bot.delete_message(message.chat.id, data["wait_msg_id"])
            except Exception:
                pass
        await safe_send_plain(message, response_ai_to_text)
    

    except exceptions.PermissionDenied:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–µ—Ä–µ–Ω –ª–∏ API –∫–ª—é—á –∏ –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∞.")
        await state.clear()
        return

    except exceptions.ResourceExhausted:
        await message.answer("‚ö† –ö–≤–æ—Ç–∞ –ø–æ –≤–∞—à–µ–º—É API –∫–ª—é—á—É –∏—Å—á–µ—Ä–ø–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª—é—á.")
        await state.clear()
        return

    except exceptions.NotFound:
        await message.answer("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é.")
        await state.clear()
        return

    except exceptions.InvalidArgument:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞.")
        await state.clear()
        return

    except Exception as e:
        await message.reply(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI: {e}")
        return

    finally:
        await state.clear()

MIME_TYPES = {
    ".jpg": "image/jpeg",
    ".jpeg": "image/jpeg",
    ".png": "image/png",
    ".mp4": "video/mp4",
    ".mp3": "audio/mpeg",
    ".pdf": "application/pdf",
    ".docx": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
    ".txt": "text/plain",
    # –¥–æ–±–∞–≤—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

async def find_extension_from_handle_media(
    message: types.Message
) -> tuple[types.PhotoSize | types.Video | types.Audio | types.Document | None, str | None, str | None, str | None]:

    if message.photo:
        media = message.photo[-1]
        message_type = "image"
        extension = ".jpg"
    elif message.video:
        media = message.video
        message_type = "video"
        extension = ".mp4"
    elif message.audio:
        media = message.audio
        message_type = "audio"
        extension = ".mp3"
    elif message.document:
        media = message.document
        message_type = "document"
        extension = os.path.splitext(media.file_name or "")[1] or ""
    else:
        return None, None, None

    return media, message_type, extension


@router.message(F.content_type.in_({"photo", "video", "audio", "document"}))
async def handle_media(message: types.Message, state: FSMContext):
    await state.set_state(ChatStates.waiting_for_ai)

    user_id = message.from_user.id
    caption_text = (message.caption or "").strip()

    try:
        telegram_user = await get_telegram_user(user_id=user_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–¥–∏–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        media, message_type, extension = await find_extension_from_handle_media(message)

        if not (media and message_type and extension):
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞.")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        file_name = f"{media.file_unique_id}{extension}"
        relative_path = os.path.join("history_files", file_name)
        absolute_path = os.path.join(settings.MEDIA_ROOT, relative_path)

        os.makedirs(os.path.dirname(absolute_path), exist_ok=True)

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Django FileField
        file_info = await message.bot.get_file(media.file_id)
        await message.bot.download_file(file_info.file_path, destination=absolute_path)

        if not os.path.exists(absolute_path):
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å MEDIA_ROOT.")
            return

        with open(absolute_path, "rb") as f:
            django_file = File(f, name=os.path.basename(relative_path))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            await create_history(
                telegram_user=telegram_user,
                role="user",
                message_type=message_type,
                content=caption_text,
                file=django_file
            )

        system_message = await message.answer(f"üìÅ {message_type.capitalize()} –ø–æ–ª—É—á–µ–Ω. –ó–∞–≥—Ä—É–∂–∞—é –≤ AI...")

        # –ö–ª–∏–µ–Ω—Ç AI
        api_key = telegram_user.access_token or GEMINI_API_KEY
        if not api_key:
            await message.answer(
                "üîë –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω API –∫–ª—é—á –¥–ª—è Google AI.\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_access_key —á—Ç–æ–±—ã –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å."
            )
            return
        
        client = await genai_client(api_key=api_key)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (—Ñ–∞–π–ª –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—Å—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏)
        response_ai = await genai_chat_generation(
            client=client,
            user_id=user_id,
            message=caption_text or ""
        )

        if response_ai.text:
            await create_history(
                telegram_user=telegram_user,
                role="model",
                message_type="text",
                content=response_ai.text
            )
            await system_message.delete()
            await safe_send_plain(message, response_ai.text)
        else:
            await message.answer("ü§î AI –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç.")

    except Exception as e:
        await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
    finally:
        await state.clear()

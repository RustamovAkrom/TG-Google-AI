import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

from django.core.management.base import BaseCommand
from core import settings


from apps.bot.middlewares import (
    SubscriptionMiddleware,
    TypingMiddleware,
    IsUserActiveMiddleware,
)

from apps.bot.handlers import *


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO,  # –º–æ–∂–Ω–æ DEBUG –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)


class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ (aiogram)"

    def handle(self, *args, **options):
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Django management command.")
        asyncio.run(self.start_bot())

    async def start_bot(self):

        # Intialization Bot
        logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
        bot = Bot(
            token=settings.TELEGRAM_BOT_TOKEN,
            default=DefaultBotProperties(parse_mode="HTML"),
        )

        # Creating Dispatcher
        logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ FSM-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞.")
        dp = Dispatcher(storage=MemoryStorage())

        # Register Global Router which included all routers
        logger.debug("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ —Å —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏.")
        dp.include_router(global_router)

        # Register Middleware
        dp.message.middleware(SubscriptionMiddleware())
        dp.message.middleware(TypingMiddleware())
        # dp.message.middleware(IsUserActiveMiddleware())

        self.stdout.write(self.style.SUCCESS("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π..."))
        logger.info("Aiogram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

        try:
            await dp.start_polling(bot)
        except (KeyboardInterrupt, SystemExit):
            self.stdout.write(self.style.WARNING("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."))
            logger.warning("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
        except Exception as e:
            logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
